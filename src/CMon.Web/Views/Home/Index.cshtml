@{
    ViewData["Title"] = "Home Page";
}
<link href="~/css/metricsgraphics.css" rel="stylesheet" type="text/css">

<style>
	.axis {
		font: 10px monospace;
	}

	.axis path {
		stroke-opacity: 0.2;
	}

	.axis .tick {
		stroke-opacity: 0.6;
	}

	.axis .tick-ext {
		stroke: #000;
		stroke-opacity: 0.1;
	}

	.line {
		/*left: 0;*/
		fill: none;
		stroke-width: 1.4px;
	}

	.area {
		fill-opacity: 0.4;
	}
</style>

Data for
<a href="/?h=1">1</a>,
<a href="/?h=2">2</a>,
<a href="/?h=4">4</a>,
<a href="/?h=8">8</a>,
<a href="/?h=12">12</a>,
<a href="/?h=24">24</a>,
<a href="/?h=48">48</a>,
<a href="/?h=96">96</a> hours

<svg width="1100" height="320"></svg>
<div id="chart"></div>

@section scripts
{
	<script type="text/javascript">
		function getParameterByName(name, url) {
			if (!url) {
				url = window.location.href;
			}
			name = name.replace(/[\[\]]/g, "\\$&");
			var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
				results = regex.exec(url);
			if (!results) return null;
			if (!results[2]) return '';
			return decodeURIComponent(results[2].replace(/\+/g, " "));
		}

		function getChartDataUrl() {
			var d = getParameterByName('d') || '1',
				h = getParameterByName('h') || '1';
			return '/api/values?deviceId=' + d + '&h=' + h + '&t=' + new Date().getTime();
		}

		function getChartDataUrl2() {
			var d = getParameterByName('d') || '1',
			h = getParameterByName('h') || '1';
			return '/api/values/GetValues?deviceId=' + d + '&h=' + h + '&t=' + new Date().getTime();
		}
		
	</script>

	<script src="//d3js.org/d3.v4.min.js"></script>
	<script src="~/js/metricsgraphics.js" type="text/javascript"></script>

	<script>

		(function () {
			var svg = d3.select("svg"),
				margin = { top: 20, right: 60, bottom: 20, left: 20 },
				width = svg.attr("width") - margin.left - margin.right,
				height = svg.attr("height") - margin.top - margin.bottom,
				g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

			// var parseTime = d3.timeParse("%Y-%m-%dT%H:%M:%S");

			var x = d3.scaleTime().range([0, width]),
				y = d3.scaleLinear().range([height, 0]),
				z = d3.scaleOrdinal(d3.schemeCategory10);

			/* var line = d3.line()
				// .defined(function (d) { return d.avg; }) // https://github.com/d3/d3-shape/blob/master/README.md#line_defined
				// .curve(d3.curveLinear)
				// .curve(d3.curveMonotoneX)
				// .curve(d3.curveBasis)
				// .curve(d3.curveStep)
				// .curve(d3.curveStepAfter)
				.x(function(d) { return x(d.period); })
				.y(function(d) { return y(d.avg); }); */

			var onDataLoaded = function (error, data, update) {

				if (error) return; // throw error;

				data.beginDate = d3.isoParse(data.beginDate);
				data.endDate = d3.isoParse(data.endDate);

				for (var i = 0; i < data.inputs.length; i++) {
					// console.log(data.inputs[i].inputNo, ":", data.inputs[i].values.length);
					for (var j = 0; j < data.inputs[i].values.length; j++) {
						var value = data.inputs[i].values[j];
						value.period = d3.isoParse(value.period);
					}
				}

				var x_domain = d3.extent(data.inputs[0].values, function (d) { return d.period; });

				var y_domain = [
					Math.min(d3.min(data.inputs[0].values, function (d) { return d.min; }), 0.0),
					d3.max(data.inputs[1].values, function (d) { return d.max; }) * 1.1
				];

				var z_domain = data.inputs.map(function (c) { return c.inputNo; });

				// var inputs = data.inputs; // ['TEMP_IN', 'TEMP_HEAT', 'TEMP'];

				x = x.domain(x_domain);
				y = y.domain(y_domain);
				z = z.domain(z_domain);

				var line = d3.line()
					.x(function(d) { return x(d.period); })
					.y(function(d) { return y(d.avg); });

				var area = d3.area()
					.x(function (d) { return x(d.period); })
					.y0(function (d) { return y(d.min); })
					.y1(function (d) { return y(d.max); });

				// console.log("x.domain:", x_domain.map(function (x) { return x.toLocaleString(); }));
				// console.log("y.domain:", y_domain);
				// console.log("z.domain:", z_domain);

				if (update) {
					var t = svg.transition().duration(300);

					// x axis
					t.select(".axis--x")
						.attr("transform", "translate(0," + height + ")")
						.call(d3.axisBottom(x).ticks(24));

					// vertical lines
					g.selectAll("g.axis--x g.tick line.tick-ext")
						.remove();
					g.selectAll("g.axis--x g.tick")
						.append("line")
						.attr("class", "tick-ext")
						.attr("x1", 0.5)
						.attr("y1", 0)
						.attr("x2", 0.5)
						.attr("y2", -height);
					
					// y axis
					t.select(".axis--y")
						.call(d3.axisLeft(y).ticks(12));

					// horizontal lines
					g.selectAll("g.axis--y g.tick line.tick-ext")
						.remove();
					g.selectAll("g.axis--y g.tick")
						.append("line")
						.attr("class", "tick-ext")
						.attr("x1", 0)
						.attr("y1", 0.5)
						.attr("x2", width)
						.attr("y2", 0.5);

					// inputs
					g.selectAll(".input")
						.data(data.inputs)
						.enter().append("g")
						.attr("class", "input");

					// change the area
					g.selectAll(".area")
						.data(data.inputs)
						.attr("d", function (d) { return area(d.values); })
						.style("fill", function (d) { return z(d.inputNo); })
						.transition().duration(100);

					// change the line
					g.selectAll(".line")   
						.data(data.inputs)
						.attr("d", function (d) { return line(d.values); })
						.style("stroke", function (d) { return z(d.inputNo); })
						.transition().duration(100);

				} else {

					// x axis
					g.append("g")
						.attr("class", "axis axis--x")
						.attr("transform", "translate(0," + height + ")")
						.call(d3.axisBottom(x).ticks(24));

					// vertical lines
					g.selectAll("g.axis--x g.tick")
						.append("line")
						.attr("class", "tick-ext")
						.attr("x1", 0.5)
						.attr("y1", 0)
						.attr("x2", 0.5)
						.attr("y2", -height);

					// y axis
					g.append("g")
						.attr("class", "axis axis--y")
						.call(d3.axisLeft(y).ticks(12))
						.append("text")
						.attr("transform", "rotate(-90)")
						.attr("y", 7)
						.attr("dy", "0.71em")
						.attr("fill", "#999")
						.text("Temperature, ºC");

					// horizontal lines
					g.selectAll("g.axis--y g.tick")
						.append("line")
						.attr("class", "tick-ext")
						.attr("x1", 0)
						.attr("y1", 0.5)
						.attr("x2", width)
						.attr("y2", 0.5);

					var gs = g.selectAll(".input")
						.data(data.inputs)
						.enter().append("g")
						.attr("class", "input");

					gs.append("path")
						.attr("class", "area")
						.attr("d", function (d) { return area(d.values); })
						.style("fill", function (d) { return z(d.inputNo); });

					gs.append("path")
						.attr("class", "line")
						.attr("d", function (d) { return line(d.values); })
						.style("stroke", function (d) { return z(d.inputNo); });

					gs.append("text")
						.datum(function (d) { return { inputNo: d.inputNo, name: d.name, value: d.values[d.values.length - 1] }; })
						.attr("transform", function (d) { return "translate(" + x(d.value.period) + "," + y(d.value.avg) + ")"; })
						.attr("x", 5.0)
						.attr("dy", "0.3em")
						.style("font", "10px monospace")
						.style("fill", function (d) { return z(d.inputNo); })
						.text(function (d) { return d.name; });
				}
			};

			d3.json(getChartDataUrl2(),
				function(error, data) {
					onDataLoaded(error, data, false);
				}
			);

			var interval = setInterval(
				function() {
					d3.json(getChartDataUrl2(),
						function(error, data) {
							onDataLoaded(error, data, true);
						});
				},
				15000);
		})();
	</script>

	<script type="text/javascript">
		var updateChart = function() {
			var url = getChartDataUrl();
			d3.json(url,
				function(data) {
					for (var i = 0; i < data.length; i++) {
						data[i] = MG.convert.date(data[i], 'date', '%m/%d/%Y %H:%M:%S'); //
					}

					MG.data_graphic({
						data: data,
						// chart_type: 'bar',
						full_width: true,
						// full_height: true,
						height: 400,
						right: 60,
						x_extended_ticks: true,
						xax_count: 12,
						y_extended_ticks: true,
						yax_count: 12,
						yax_units: ' °C',
						yax_units_append: true,
						legend: ['TEMP_IN', 'TEMP_HEAT', 'TEMP'],
						// missing_is_hidden: true,
						// missing_is_hidden_accessor: 'value',
						// missing_is_zero: true,
						target: '#chart',
						x_accessor: 'date',
						y_accessor: 'value',
						// interpolate: d3.curveStep
						// show_year_markers: true
					});
				});
		}

		updateChart();

		// setInterval(updateChart, 1000);

	</script>

}
